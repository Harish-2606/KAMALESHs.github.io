<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sk To-Do List</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .stats {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .stat-item {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 15px 25px;
            border-radius: 15px;
            color: white;
            text-align: center;
            min-width: 120px;
        }

        .stat-number {
            font-size: 1.5rem;
            font-weight: bold;
            display: block;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .add-task {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .add-task h2 {
            color: white;
            margin-bottom: 15px;
            font-size: 1.3rem;
        }

        .input-group {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .task-input {
            flex: 1;
            padding: 12px 15px;
            border: none;
            border-radius: 25px;
            font-size: 1rem;
            background: rgba(255, 255, 255, 0.9);
            outline: none;
            transition: all 0.3s ease;
        }

        .task-input:focus {
            background: white;
            box-shadow: 0 0 15px rgba(255, 255, 255, 0.3);
        }

        .add-btn {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .add-btn:hover {
            background: #45a049;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(76, 175, 80, 0.4);
        }

        .priority-select {
            padding: 12px 15px;
            border: none;
            border-radius: 25px;
            background: rgba(255, 255, 255, 0.9);
            font-size: 1rem;
            outline: none;
            cursor: pointer;
        }

        .tasks-section {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .section-title {
            color: white;
            font-size: 1.5rem;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .task-list {
            list-style: none;
        }

        .task-item {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            padding: 15px;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 15px;
            transition: all 0.3s ease;
            animation: fadeIn 0.5s ease-in;
        }

        .task-item:hover {
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .task-item.completed {
            opacity: 0.7;
            background: rgba(200, 255, 200, 0.9);
        }

        .task-item.completed .task-text {
            text-decoration: line-through;
            color: #666;
        }

        .task-checkbox {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .task-checkbox:not(.completed) {
            border: 2px solid #ddd;
            background: white;
        }

        .task-checkbox.completed {
            background: #4CAF50;
            border: 2px solid #4CAF50;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
        }

        .task-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .task-text {
            font-size: 1.1rem;
            font-weight: 500;
            color: #333;
        }

        .task-meta {
            display: flex;
            gap: 15px;
            font-size: 0.85rem;
            color: #666;
            flex-wrap: wrap;
        }

        .priority {
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.8rem;
            font-weight: bold;
            color: white;
        }

        .priority.high { background: #f44336; }
        .priority.medium { background: #ff9800; }
        .priority.low { background: #4CAF50; }

        .task-actions {
            display: flex;
            gap: 5px;
        }

        .action-btn {
            background: none;
            border: none;
            width: 35px;
            height: 35px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .edit-btn {
            color: #2196F3;
        }

        .edit-btn:hover {
            background: rgba(33, 150, 243, 0.1);
        }

        .delete-btn {
            color: #f44336;
        }

        .delete-btn:hover {
            background: rgba(244, 67, 54, 0.1);
        }

        .empty-state {
            text-align: center;
            color: rgba(255, 255, 255, 0.7);
            font-style: italic;
            padding: 40px;
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 15px;
            opacity: 0.5;
        }

        /* Edit Mode Styles */
        .edit-input {
            background: white;
            border: 2px solid #2196F3;
            border-radius: 8px;
            padding: 8px 12px;
            font-size: 1.1rem;
            width: 100%;
            outline: none;
        }

        .edit-actions {
            display: flex;
            gap: 5px;
            margin-top: 10px;
        }

        .save-btn {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 5px 15px;
            border-radius: 15px;
            cursor: pointer;
            font-size: 0.9rem;
        }

        .cancel-btn {
            background: #757575;
            color: white;
            border: none;
            padding: 5px 15px;
            border-radius: 15px;
            cursor: pointer;
            font-size: 0.9rem;
        }

        /* Filter Buttons */
        .filter-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .filter-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .filter-btn.active {
            background: rgba(255, 255, 255, 0.8);
            color: #333;
        }

        .filter-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            .header h1 {
                font-size: 2rem;
            }

            .input-group {
                flex-direction: column;
            }

            .stats {
                flex-direction: column;
                align-items: center;
            }

            .task-meta {
                flex-direction: column;
                gap: 5px;
            }

            .task-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-tasks"></i> My To-Do List</h1>
            <p>Stay organized and productive with your daily tasks</p>
        </div>

        <div class="stats">
            <div class="stat-item">
                <span class="stat-number" id="totalTasks">0</span>
                <span class="stat-label">Total Tasks</span>
            </div>
            <div class="stat-item">
                <span class="stat-number" id="pendingTasks">0</span>
                <span class="stat-label">Pending</span>
            </div>
            <div class="stat-item">
                <span class="stat-number" id="completedTasks">0</span>
                <span class="stat-label">Completed</span>
            </div>
        </div>

        <div class="add-task">
            <h2><i class="fas fa-plus-circle"></i> Add New Task</h2>
            <div class="input-group">
                <input type="text" id="taskInput" class="task-input" placeholder="What needs to be done?" maxlength="100">
                <select id="prioritySelect" class="priority-select">
                    <option value="low">Low Priority</option>
                    <option value="medium" selected>Medium Priority</option>
                    <option value="high">High Priority</option>
                </select>
                <button id="addTaskBtn" class="add-btn">
                    <i class="fas fa-plus"></i> Add Task
                </button>
            </div>
        </div>

        <div class="filter-buttons">
            <button class="filter-btn active" data-filter="all">All Tasks</button>
            <button class="filter-btn" data-filter="pending">Pending Only</button>
            <button class="filter-btn" data-filter="completed">Completed Only</button>
            <button class="filter-btn" data-filter="high">High Priority</button>
        </div>

        <div class="tasks-section">
            <h2 class="section-title">
                <i class="fas fa-clock"></i> Pending Tasks
            </h2>
            <ul id="pendingTasksList" class="task-list"></ul>
        </div>

        <div class="tasks-section">
            <h2 class="section-title">
                <i class="fas fa-check-circle"></i> Completed Tasks
            </h2>
            <ul id="completedTasksList" class="task-list"></ul>
        </div>
    </div>

    <script>
        class TodoApp {
            constructor() {
                this.tasks = JSON.parse(localStorage.getItem('todoTasks')) || [];
                this.currentFilter = 'all';
                this.taskIdCounter = this.tasks.length > 0 ? Math.max(...this.tasks.map(t => t.id)) + 1 : 1;
                this.editingTaskId = null;
                
                this.bindEvents();
                this.renderTasks();
                this.updateStats();
            }

            bindEvents() {
                // Enter key support for task input
                document.getElementById('taskInput').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.addTask();
                    }
                });

                // Add task button
                document.getElementById('addTaskBtn').addEventListener('click', () => {
                    this.addTask();
                });

                // Filter buttons
                document.querySelectorAll('.filter-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        const filter = e.target.dataset.filter;
                        this.filterTasks(filter);
                    });
                });

                // Auto-save on page unload
                window.addEventListener('beforeunload', () => {
                    this.saveTasks();
                });
            }

            addTask() {
                const taskInput = document.getElementById('taskInput');
                const prioritySelect = document.getElementById('prioritySelect');
                const taskText = taskInput.value.trim();

                if (!taskText) {
                    alert('Please enter a task!');
                    return;
                }

                const newTask = {
                    id: this.taskIdCounter++,
                    text: taskText,
                    priority: prioritySelect.value,
                    completed: false,
                    createdAt: new Date().toISOString(),
                    completedAt: null
                };

                this.tasks.unshift(newTask); // Add to beginning of array
                taskInput.value = '';
                prioritySelect.value = 'medium';

                this.saveTasks();
                this.renderTasks();
                this.updateStats();

                // Show success feedback
                this.showNotification('Task added successfully!', 'success');
            }

            toggleTask(taskId) {
                const task = this.tasks.find(t => t.id === taskId);
                if (task) {
                    task.completed = !task.completed;
                    task.completedAt = task.completed ? new Date().toISOString() : null;
                    
                    this.saveTasks();
                    this.renderTasks();
                    this.updateStats();
                    
                    const message = task.completed ? 'Task completed!' : 'Task moved to pending!';
                    this.showNotification(message, 'success');
                }
            }

            deleteTask(taskId) {
                if (confirm('Are you sure you want to delete this task?')) {
                    this.tasks = this.tasks.filter(t => t.id !== taskId);
                    this.saveTasks();
                    this.renderTasks();
                    this.updateStats();
                    this.showNotification('Task deleted!', 'success');
                }
            }

            startEditTask(taskId) {
                this.editingTaskId = taskId;
                this.renderTasks();
            }

            saveEditTask(taskId, newText) {
                const task = this.tasks.find(t => t.id === taskId);
                if (task && newText.trim()) {
                    task.text = newText.trim();
                    task.editedAt = new Date().toISOString();
                    this.editingTaskId = null;
                    this.saveTasks();
                    this.renderTasks();
                    this.showNotification('Task updated!', 'success');
                } else {
                    this.cancelEdit();
                }
            }

            cancelEdit() {
                this.editingTaskId = null;
                this.renderTasks();
            }

            filterTasks(filter) {
                this.currentFilter = filter;
                
                // Update active filter button
                document.querySelectorAll('.filter-btn').forEach(btn => {
                    btn.classList.remove('active');
                    if (btn.dataset.filter === filter) {
                        btn.classList.add('active');
                    }
                });
                
                this.renderTasks();
            }

            getFilteredTasks(completed) {
                let filtered = this.tasks.filter(task => task.completed === completed);
                
                if (this.currentFilter === 'pending') {
                    filtered = filtered.filter(task => !task.completed);
                } else if (this.currentFilter === 'completed') {
                    filtered = filtered.filter(task => task.completed);
                } else if (this.currentFilter === 'high') {
                    filtered = filtered.filter(task => task.priority === 'high');
                }
                
                return filtered;
            }

            renderTasks() {
                const pendingList = document.getElementById('pendingTasksList');
                const completedList = document.getElementById('completedTasksList');
                
                // Clear existing tasks
                pendingList.innerHTML = '';
                completedList.innerHTML = '';
                
                // Get filtered tasks
                const pendingTasks = this.getFilteredTasks(false);
                const completedTasks = this.getFilteredTasks(true);
                
                // Render pending tasks
                if (pendingTasks.length === 0) {
                    pendingList.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-inbox"></i>
                            <p>No pending tasks found</p>
                        </div>
                    `;
                } else {
                    pendingTasks.forEach(task => {
                        pendingList.appendChild(this.createTaskElement(task));
                    });
                }
                
                // Render completed tasks
                if (completedTasks.length === 0) {
                    completedList.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-check-circle"></i>
                            <p>No completed tasks yet</p>
                        </div>
                    `;
                } else {
                    completedTasks.forEach(task => {
                        completedList.appendChild(this.createTaskElement(task));
                    });
                }
            }

            createTaskElement(task) {
                const li = document.createElement('li');
                li.className = `task-item ${task.completed ? 'completed' : ''}`;
                
                const isEditing = this.editingTaskId === task.id;
                
                li.innerHTML = `
                    <div class="task-checkbox ${task.completed ? 'completed' : ''}" 
                         onclick="todoApp.toggleTask(${task.id})">
                        ${task.completed ? '<i class="fas fa-check"></i>' : ''}
                    </div>
                    
                    <div class="task-content">
                        ${isEditing ? `
                            <input type="text" class="edit-input" value="${task.text}" 
                                   id="edit-input-${task.id}" maxlength="100">
                            <div class="edit-actions">
                                <button class="save-btn" onclick="todoApp.saveEditTask(${task.id}, document.getElementById('edit-input-${task.id}').value)">
                                    <i class="fas fa-save"></i> Save
                                </button>
                                <button class="cancel-btn" onclick="todoApp.cancelEdit()">
                                    <i class="fas fa-times"></i> Cancel
                                </button>
                            </div>
                        ` : `
                            <div class="task-text">${task.text}</div>
                            <div class="task-meta">
                                <span class="priority ${task.priority}">${task.priority.toUpperCase()}</span>
                                <span><i class="fas fa-calendar-plus"></i> Created: ${this.formatDate(task.createdAt)}</span>
                                ${task.completedAt ? `<span><i class="fas fa-check"></i> Completed: ${this.formatDate(task.completedAt)}</span>` : ''}
                                ${task.editedAt ? `<span><i class="fas fa-edit"></i> Edited: ${this.formatDate(task.editedAt)}</span>` : ''}
                            </div>
                        `}
                    </div>
                    
                    ${!isEditing ? `
                        <div class="task-actions">
                            <button class="action-btn edit-btn" onclick="todoApp.startEditTask(${task.id})" title="Edit Task">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="action-btn delete-btn" onclick="todoApp.deleteTask(${task.id})" title="Delete Task">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    ` : ''}
                `;
                
                return li;
            }

            formatDate(dateString) {
                const date = new Date(dateString);
                const now = new Date();
                const diffTime = Math.abs(now - date);
                const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
                
                if (diffDays === 0) {
                    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                } else if (diffDays === 1) {
                    return 'Yesterday';
                } else if (diffDays < 7) {
                    return `${diffDays} days ago`;
                } else {
                    return date.toLocaleDateString();
                }
            }

            updateStats() {
                const total = this.tasks.length;
                const completed = this.tasks.filter(t => t.completed).length;
                const pending = total - completed;
                
                document.getElementById('totalTasks').textContent = total;
                document.getElementById('pendingTasks').textContent = pending;
                document.getElementById('completedTasks').textContent = completed;
            }

            saveTasks() {
                localStorage.setItem('todoTasks', JSON.stringify(this.tasks));
            }

            showNotification(message, type = 'info') {
                // Create notification element
                const notification = document.createElement('div');
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: ${type === 'success' ? '#4CAF50' : '#2196F3'};
                    color: white;
                    padding: 15px 20px;
                    border-radius: 10px;
                    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
                    z-index: 1000;
                    animation: slideIn 0.3s ease;
                `;
                notification.textContent = message;
                
                document.body.appendChild(notification);
                
                // Remove after 3 seconds
                setTimeout(() => {
                    notification.style.animation = 'slideOut 0.3s ease';
                    setTimeout(() => {
                        document.body.removeChild(notification);
                    }, 300);
                }, 3000);
            }

            // Export tasks to JSON
            exportTasks() {
                const dataStr = JSON.stringify(this.tasks, null, 2);
                const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
                
                const exportFileDefaultName = 'my-tasks.json';
                
                const linkElement = document.createElement('a');
                linkElement.setAttribute('href', dataUri);
                linkElement.setAttribute('download', exportFileDefaultName);
                linkElement.click();
            }

            // Clear all completed tasks
            clearCompletedTasks() {
                if (confirm('Are you sure you want to delete all completed tasks?')) {
                    this.tasks = this.tasks.filter(t => !t.completed);
                    this.saveTasks();
                    this.renderTasks();
                    this.updateStats();
                    this.showNotification('All completed tasks cleared!', 'success');
                }
            }
        }

        // Initialize the app
        const todoApp = new TodoApp();

        // Add some sample tasks for demonstration (only on first visit)
        if (todoApp.tasks.length === 0) {
            const sampleTasks = [
                { text: 'Welcome to your new To-Do app!', priority: 'high' },
                { text: 'Try adding your first task above', priority: 'medium' },
                { text: 'Click the checkbox to mark tasks complete', priority: 'low' }
            ];
            
            sampleTasks.forEach(sample => {
                document.getElementById('taskInput').value = sample.text;
                document.getElementById('prioritySelect').value = sample.priority;
                todoApp.addTask();
            });
        }

        // Add CSS animations
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>
